
Example 1: Estimate the value of f (x) at x = 0.9 from the following data:
x: [0, 0.5, 1.0, 1.5]$
f: [1.0, 1.6487, 2.7183, 4.4817]$ /* e^x values */
X: 0.9$
kill(all)$
numer:true$
fpprintprec:6$

/* Given values (example data for e^x) */
x: [0, 0.5, 1.0, 1.5]$
f: [1.0, 1.6487, 2.7183, 4.4817]$
X: 0.9$
n: length(x) - 1$

/* Create difference table */
array(y, n+1, n+1)$
for i:0 thru n do (
    y[1,i+1]: f[i+1]
)$

/* Compute forward differences */
for i:2 thru n+1 do (
    for j:1 thru n - i + 2 do (
        y[i,j]: y[i-1,j+1] - y[i-1,j]
    )
)$

/* Newton's Forward Interpolation */
h: x[2] - x[1]$
p: (X - x[1]) / h$
Y: y[1,1]$

for i:1 thru n do (
    term: y[i+1,1],
    for k:0 thru i-1 do (
        term: term * (p - k)
    ),
    term: term / factorial(i),
    Y: Y + term
)$

print("Estimated value of f(", X, ") is ", Y)$


Example 3:
Find the curve y = f(x) which passes through the points:
(0, 1),\ (1, 2),\ (2, 1),\ (3, 10)
kill(all)$
numer: true$
fpprintprec: 6$

/* Given x and f(x) values */
x: [0, 1, 2, 3]$
f: [1, 2, 1, 10]$
X: 1.5$ /* Change this value to evaluate f(X) at different x */
n: length(x) - 1$

/* Initialize forward difference table */
array(y, n+1, n+1)$

/* First column: y[1, i] = f(x_i) */
for i: 0 thru n do (
    y[1, i+1]: f[i+1]
)$

/* Compute forward differences */
for i: 2 thru n+1 do (
    for j: 1 thru n - i + 2 do (
        y[i, j]: y[i-1, j+1] - y[i-1, j]
    )
)$

/* Newton's Forward Interpolation */
h: x[2] - x[1]$
p: (X - x[1]) / h$
Y: y[1, 1]$

for i: 1 thru n do (
    term: y[i+1, 1],
    for k: 0 thru i - 1 do (
        term: term * (p - k)
    ),
    term: term / factorial(i),
    Y: Y + term
)$

print("The estimated value of y at x =", X, "is", Y)$

Example 5: Estimate the value of f(x) at x = 4.12 from the following data
x: [2, 3, 4, 5]
f(x): [4, 8, 16, 32]
X = 4.12

kill(all)$
numer:true$
fpprintprec:5$

/* Given x and f(x) values */
x: [2, 3, 4, 5]$
f: [4, 8, 16, 32]$
X: 4.12$
n: length(x) - 1$

/* Initialize backward difference table */
array(y, n+1, n+1)$

/* First column (y[1, i]) = f(x_i) */
for i:0 thru n do (
    y[1, i+1]: f[i+1]
)$

/* Compute backward differences */
for i:2 thru n+1 do (
    for j:i thru n+1 do (
        y[i, j]: y[i-1, j] - y[i-1, j-1]
    )
)$

/* Newton's Backward Interpolation */
h: x[2] - x[1]$
p: (X - x[n+1]) / h$
Y: y[1, n+1]$

for i:1 thru n do (
    term: y[i+1, n+1],
    for k:0 thru i-1 do (
        term: term * (p + k)
    ),
    term: term / factorial(i),
    Y: Y + term
)$

print("Estimated value of f(", X, ") is ", Y)$



